// LECTURES
/*
console.log(23 === 23.0);

// Base 10 - 0 to 9. 1/10 = 0.1, 3/10 = 3.333333333
// Binary base 2 - 0 and 1 only
console.log(0.1 + 0.2);
console.log(0.1 + 0.2 === 0.3);

console.log(Number('23'));
console.log(+'23');

// Parsing
console.log(Number.parseInt('30px', 10));
console.log(Number.parseInt('e30px', 10));

console.log(Number.parseFloat('   2.5rem    '));
console.log(Number.parseInt('   2.5rem '));

console.log(parseFloat('   2.5rem    '));

console.log(Number.isNaN(20));
console.log(Number.isNaN('20'));
console.log(Number.isNaN(+'20X'));
console.log(Number.isNaN(20 / 0));

console.log(Number.isFinite(20));
console.log(Number.isFinite('20'));
console.log(Number.isFinite(+'20X'));
console.log(Number.isFinite(20 / 3));

console.log(Number.isInteger(23));
console.log(Number.isInteger(23.0));
console.log(Number.isInteger(23 / 0));
console.log(Number.isInteger(23.5));
*/
/*
console.log(Math.sqrt(25));
console.log(25 ** (1 / 2));
console.log(8 ** (1 / 3));

console.log(Math.max(5, 18, 234, 7777, 45, 101));
console.log(Math.max(5, 18, 234, '7777', 45, 101));
console.log(Math.max(5, 18, 234, '7777px', 45, 101));

console.log(Math.min(5, 18, 234, 7777, 45, 101));

console.log(Math.PI);
console.log(Math.PI * Number.parseFloat('10px') ** 2); // PIr2

// console.log(Math.trunc(Math.random() * 6) + 1);

const randomInt = (min, max) =>
  Math.floor(Math.random() * (max - min) + 1) + min;
const randomInt2 = max => Math.trunc(Math.random() * (max + 1));

console.log(randomInt(1, 10), randomInt2(10));
console.log('------------------------');
// Rounding integers
console.log(Math.trunc(23.3));
console.log(Math.trunc(23.9));
console.log('-----');
console.log(Math.round(-23.3));
console.log(Math.round(-23.9));
console.log('-----');
console.log(Math.ceil(23.3));
console.log(Math.ceil(23.9));
console.log('-----');
console.log(Math.floor(23.3));
console.log(Math.floor('23.9'));
console.log('-----');
console.log(Math.trunc(-23.3));
console.log(Math.floor(-23.3));

// Rounding decimals (floating points)
console.log((2.7).toFixed(0));
console.log((2.7).toFixed(3));
console.log((2.345).toFixed(2));
console.log(+(2.345).toFixed(2));
*/
/*
console.log(5 % 2);
console.log(5 / 2); // 5 = 2 * 2 + 1 (remainder 1)
console.log(8 % 3);
console.log(8 / 3); // 8 = 2 * 3 + 2

const isEven = n => n % 2 === 0;

labelBalance.addEventListener('click', function () {
  [...document.querySelectorAll('.movements__row')].forEach(function (row, i) {
    if (i % 2 === 0) row.style.backgroundColor = 'orangered';
    if (i % 3 === 0) row.style.backgroundColor = 'blue';
  });
});

const diameter = 287_460_000_000;
console.log(diameter);

const priceCents = 345_99;
console.log(priceCents);

const transferFee = 15_00;
const transferFee = 1_500;

// const PI = 3.14__15;

console.log(Number('230_000'));
console.log(parseInt('230_000'));
*/
/*
console.log(2 ** 53 - 1);
console.log(Number.MAX_SAFE_INTEGER);
console.log(2 ** 53 + 1);
console.log(2 ** 53 + 2);
console.log(2 ** 53 + 3);
console.log(2 ** 53 + 4);

console.log(43895743987459862398653723856);
console.log(43895743987459862398653723856n);
console.log(BigInt(43895743987459862398653723856));

// Operations

console.log(10_000n + 10_000n);
console.log(3296923746937427340293750937n * 23982479238749n);
// console.log(Math.sqrt(16n));

const huge = 43895743987459862398653723856n;
const num = 23;
// console.log(huge + num);
console.log(huge + BigInt(num));

// Exception
console.log(20n > 15);
console.log(20n === 20);
console.log(typeof 20n);
console.log(20n == 20);
console.log(20n == '20');

console.log(huge + ' is REALLY big!!!');

// Divisions
console.log(10n / 3n);
console.log(10 / 3);
*/

// Create a date

// const now = new Date();
// console.log(now);

// console.log(new Date('Sat Jan 22 2022 15:05:49'));
// console.log(new Date('December 24, 1999'));
// console.log(new Date(account1.movementsDates[0]));

// console.log(new Date(2037, 10, 19, 15, 23, 5));
// console.log(new Date(2037, 10, 31, 15, 23, 5));
// console.log(new Date(2037, 10, 33, 15, 23, 5));

// console.log(new Date(0));
// console.log(new Date(3 * 24 * 60 * 60 * 1000));

// Working with Dates
/*
const future = new Date(2037, 10, 19, 15, 23);
console.log(future);
console.log(future.getFullYear());
console.log(future.getMonth());
console.log(future.getDate());
console.log(future.getDay());
console.log(future.getHours());
console.log(future.getMinutes());
console.log(future.getSeconds());
console.log(future.toISOString());
console.log(future.getTime());

console.log(new Date(2142256980000));

console.log(Date.now());

future.setFullYear(2040);
console.log(future);
*/
/*
const future = new Date(2037, 10, 19, 15, 23);
console.log(+future);

const calcDaysPassed = (date1, date2) =>
  Math.abs(date2 - date1) / (1000 * 60 * 60 * 24);

const days1 = calcDaysPassed(new Date(2037, 10, 19), new Date(2037, 10, 29));
console.log(days1);
*/
/*
const num = 23423542.23;

const options = {
  style: 'unit',
  style: 'percent',
  style: 'currency',
  unit: 'mile-per-hour',
  unit: 'celcius',
  unit: 'mile-per-hour',
  currency: 'EUR',
  useGrouping: false,
};

console.log('US:', new Intl.NumberFormat('en-US', options).format(num));
console.log('Germany:', new Intl.NumberFormat('de-DE').format(num));
console.log('Syria:', new Intl.NumberFormat('ar-SY').format(num));
console.log('England:', new Intl.NumberFormat('en-GB').format(num));
console.log(
  navigator.language,
  new Intl.NumberFormat(navigator.language).format(num)
);
console.log('Japan:', new Intl.NumberFormat('jp-JP').format(num));
console.log('Finland:', new Intl.NumberFormat('fi-FI').format(num));
*/
// setTimeout
const ingredients = ['olives', 'spinach'];
const pizzaTimer = setTimeout(
  (ing1, ing2) => console.log(`Here is your pizza üçï with ${ing1} and ${ing2}`),
  3000,
  ...ingredients
);
console.log('Waiting...');

if (ingredients.includes('spinach')) clearTimeout(pizzaTimer);

const options = {
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric',
};

setInterval
setInterval(function () {
  const now = new Date();
  console.log(new Intl.DateTimeFormat('en-GB', options).format(now));
}, 1000);
