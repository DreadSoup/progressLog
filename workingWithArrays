// LECTURES

// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

/////////////////////////////////////////////////
/*
let arr = ['a', 'b', 'c', 'd', 'e'];

// Slice
console.log(arr.slice(2));
console.log(arr.slice(2, 4));
console.log(arr.slice(-2));
console.log(arr.slice(-1));
console.log(arr.slice(1, -2));
console.log(arr.slice());
console.log([...arr]);

// Splice
// console.log(arr.splice(2));
arr.splice(-1);
console.log(arr);
arr.splice(1, 2);
console.log(arr);

// Reverse
arr = ['a', 'b', 'c', 'd', 'e'];
const arr2 = ['j', 'i', 'h', 'g', 'f'];
console.log(arr2.reverse());
console.log(arr);

// Concat
const letters = arr.concat(arr2);
console.log(letters);
console.log([...arr, ...arr2]);

// Join
console.log(letters.join('-'));


const arr = [23, 11, 64];
console.log(arr[0]);
console.log(arr.at(0));

// getting last element - traditional ways
console.log(arr[arr.length - 1]);
console.log(arr.slice(-1)[0]);

// using at method
console.log(arr.at(-1));

// also works on strings
console.log('Stubs'.at(0));
console.log('Stubs'.at(-1));


const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// for (const move of movements) {
for (const [i, move] of movements.entries()) {
  if (move > 0) {
    console.log(`Move ${i + 1}: Im rich bitch ${move} `);
  } else {
    console.log(`Move ${i + 1}: You is broke ass ${Math.abs(move)}`);
  }
}

console.log('-----FOR EACH-----');

movements.forEach(function (move, index, array) {
  if (move > 0) {
    console.log(`Move ${index + 1}: Im rich bitch ${move} `);
  } else {
    console.log(`Move ${index + 1}: You is broke ass ${Math.abs(move)}`);
  }
});
// 0: function(200)
// 1: function(450)
// 2: function(400)
//...


// Map
const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

currencies.forEach(function (value, key, map) {
  console.log(`${key}: ${value}`);
});

// Set
const currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);
console.log(currenciesUnique);
currenciesUnique.forEach(function (value, _, set) {
  console.log(`${_}: ${value}`);
});
*/
/*
const eurToUsd = 1.1;

const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// const movementsUSD = movements.map(function (mov) {
//   return Math.trunc(mov * eurToUsd);
// });

// console.log(movements);
// console.log(movementsUSD);

const movementsUSDfor = [];
for (const mov of movements) movementsUSDfor.push(Math.trunc(mov * eurToUsd));
console.log(movementsUSDfor);

const movementsUSD = movements.map(mov => Math.trunc(mov * eurToUsd));
console.log(movementsUSD);

const movementsDescriptions = movements.map(
  (mov, i) =>
    `Move ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdrew'} ${Math.abs(mov)}`
);
console.log(movementsDescriptions);
*/
/*

const deposits = movements.filter(function (mov) {
  return mov > 0;
});
console.log(deposits);

const withdrawals = movements.filter(mov => mov < 0);
console.log(withdrawals);
*/

const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
// accumulator -> snowball
// const balance = movements.reduce(function (acc, cur, i, arr) {
//   console.log(`Iteration ${i}: ${acc}`);
//   return acc + cur;
// }, 0);

const balance = movements.reduce((acc, cur) => acc + cur, 0);
console.log(balance);

let balance2 = 0;
for (const mov of movements) balance2 += mov;
console.log(balance2);

// Maximum value

const maximum = movements.reduce(
  (acc, mov) => (acc > mov ? acc : mov),
  movements[0]
);
console.log(maximum);
