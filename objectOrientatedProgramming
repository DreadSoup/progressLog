'use strict';
/*
const Person = function (firstName, birthYear) {
  // Instance properties
  this.firstName = firstName;
  this.birthYear = birthYear;

  // NEVER DO THIS
  //   this.calcAge = function () {
  //     console.log(2037 - this.birthYear);
  //   };
};

const stubs = new Person('Stubs', 1987);
console.log(stubs);

const jepu = new Person('Jertta', 1989);
const tikuTaku = new Person('Tiku', 2022);
// console.log(jepu, tikuTaku);

console.log(stubs instanceof Person);

Person.hey = function () {
  console.log('Hey there üëç');
};
Person.hey();
// stubs.hey();

// Prototypes
Person.prototype.calcAge = function () {
  console.log(2037 - this.birthYear);
};

stubs.calcAge();

// console.log(stubs.__proto__);
// console.log(stubs.__proto__ === Person.prototype);

Person.prototype.species = 'Homo Sapiens';
// Person.prototype.firstName
// console.log(stubs.species, jepu.species);

// console.log(stubs.hasOwnProperty('firstName'));
// console.log(stubs.hasOwnProperty('species'));

// console.log(stubs.__proto__);
// // Object.prototype (top of prototype chain)
// console.log(stubs.__proto__.__proto__);
// console.log(stubs.__proto__.__proto__.__proto__);

console.dir(Person.prototype.constructor);

const arr = [3, 5, 3, 7, 6, 8, 9, 9, 9, 5, 7];
// console.log(arr.__proto__);
// console.log(arr.__proto__ === Array.prototype);
// Object
// console.log(arr.__proto__.__proto__);
// // Null
// console.log(arr.__proto__.__proto__.__proto__);

Array.prototype.unique = function () {
  return [...new Set(this)];
};

console.log(arr.unique());

const h1 = document.querySelector('h1');

// class expression
// const PersonCl = class {};

// class declaration
class PersonCl {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }
  // Methods will be added to .prototype property
  calcAge() {
    console.log(2037 - this.birthYear);
  }

  greet() {
    console.log(`Hey ${this.firstName}`);
  }

  get age() {
    return 2037 - this.birthYear;
  }
  // Setting a property that already exists
  set fullName(name) {
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} is not a full name!`);
  }

  get fullName() {
    return this._fullName;
  }

  // Static method
  static hey() {
    console.log('Hey there ü•≥');
    console.log(this);
  }
}

const glen = new PersonCl('Glen Gary', 1961);
console.log(glen);
glen.calcAge();
console.log(glen.age);
glen.greet();

const molly = new PersonCl('Molly May', 1991);

PersonCl.hey();
*/
// PersonCl.prototype.greet = function () {
//   console.log(`Hey ${this.firstName}`);
// };
/*
const account = {
  owner: 'stubs',
  movements: [200, 530, 120, 300],

  get latest() {
    return this.movements.slice(-1).pop();
  },

  set latest(mov) {
    this.movements.push(mov);
  },
};

console.log(account.latest);

account.latest = 50;
console.log(account.movements);
*/
/*
const PersonProto = {
  calcAge() {
    console.log(2037 - this.birthYear);
  },

  init(firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = birthYear;
  },
};

const giedre = Object.create(PersonProto);
console.log(giedre);
giedre.name = 'Giedre';
giedre.birthYear = 1998;

giedre.calcAge();

const em = Object.create(PersonProto);
em.init('Em', 1996);
em.calcAge();
*/
// Inheritance between classes
/*
const Person = function (firstName, birthYear) {
  this.firstName = firstName;
  this.birthYear = birthYear;
};

Person.prototype.calcAge = function () {
  console.log(2037 - this.birthYear);
};

const Student = function (firstName, birthYear, course) {
  Person.call(this, firstName, birthYear);
  this.course = course;
};

Student.prototype = Object.create(Person.prototype);

Student.prototype.introduce = function () {
  console.log(`My name is ${this.firstName} and I study ${this.course}`);
};

const mike = new Student('Mike', 2020, 'Computer Science');
console.log(mike);
mike.introduce();
mike.calcAge();
// Manipulate the constructor manually
Student.prototype.constructor = Student;
*/

class PersonCl {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }
  // Methods will be added to .prototype property
  calcAge() {
    console.log(2037 - this.birthYear);
  }

  greet() {
    console.log(`Hey ${this.firstName}`);
  }

  get age() {
    return 2037 - this.birthYear;
  }
  // Setting a property that already exists
  set fullName(name) {
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} is not a full name!`);
  }

  get fullName() {
    return this._fullName;
  }
  // Static method
  static hey() {
    console.log('Hey there ü•≥');
    console.log(this);
  }
}

class StudentCl extends PersonCl {
  constructor(fullName, birthYear, course) {
    //Always needs to happen first! Creates this keyword in subclass
    super(fullName, birthYear);
    this.course = course;
  }

  introduce() {
    console.log(`My name is ${this.fullName} and I study ${this.course}`);
  }

  calcAge() {
    console.log(
      `I'm ${
        2037 - this.birthYear
      } years old, but as a student I feel more like ${
        2037 - this.birthYear + 10
      }`
    );
  }
}

// const devon = new StudentCl('Devon Jones', 2012);
const devon = new StudentCl('Devon Jones', 2012, 'Computer Science');
devon.introduce();
devon.calcAge();

/*
const PersonProto = {
  calcAge() {
    console.log(2037 - this.birthYear);
  },

  init(firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = birthYear;
  },
};

const giedre = Object.create(PersonProto);

const StudentProto = Object.create(PersonProto);
StudentProto.init = function (firstName, birthYear, course) {
  PersonProto.init.call(this, firstName, birthYear);
  this.course = course;
};

StudentProto.introduce = function () {
  console.log(`My name is ${this.firstName} and I study ${this.course}`);
};

const matty = Object.create(StudentProto);
matty.init('Matty', 2010, 'Computer Science');
matty.introduce();
matty.calcAge();
*/

// 1.Public fields
// 2.Private fields
// 3.Public methods
// 4.Private fields
// also static version of these 4

class Account {
  // 1.Public fields (instances)
  locale = navigator.language;

  // 2.Private fields
  #movements = [];
  #pin;

  constructor(owner, currency, pin) {
    this.owner = owner;
    this.currency = currency;
    this.#pin = pin;
    // Protected property - not truly private
    // this._movements = [];
    // this.locale = navigator.language;

    console.log(`Thanks for opening an account, ${owner}`);
  }

  // Public methods

  //Public interface
  getMovements() {
    return this.#movements;
  }

  deposit(val) {
    this.#movements.push(val);
    return this;
  }

  withdraw(val) {
    this.deposit(-val);
    return this;
  }

  requestLoan(val) {
    // if (this.#approveLoan(val)) {
    if (this._approveLoan(val)) {
      this.deposit(val);
      console.log(`Loan approved`);
      return this;
    }
  }

  static helper() {
    console.log('Helper');
  }

  // Private methods
  // #approveLoan(val) {
  _approveLoan(val) {
    return true;
  }
}

const acc1 = new Account('Stubs', 'GBP', 1111);

//could still manipulate fields we want private
// acc1._movements.push(450)
// acc1._movements.push(-50)
//acc1._pin = 1234

acc1.deposit(250);
acc1.withdraw(140);
acc1.requestLoan(10000);
console.log(acc1);
Account.helper();

// console.log(acc1.#pin);
// console.log(acc1.#movements);
// Currently seen as a private field by Google Chrome
// console.log(acc1.#approveLoan(100));

// Chaining
acc1.deposit(300).deposit(500).withdraw(35).requestLoan(25000).withdraw(4000);
console.log(acc1.getMovements());
